//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.5.1
//     from Assets/InputActions/FlowDrag.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @FlowDrag: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @FlowDrag()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""FlowDrag"",
    ""maps"": [
        {
            ""name"": ""FlowMap"",
            ""id"": ""1399d1cf-fa15-42cc-8cfd-984dbdd8794b"",
            ""actions"": [
                {
                    ""name"": ""Drag"",
                    ""type"": ""Value"",
                    ""id"": ""d78503a3-f525-4694-85da-1d3ad5383bb0"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""MouseDrag"",
                    ""id"": ""3cd39b7a-b122-4e78-9851-7cfe9a202302"",
                    ""path"": ""OneModifier"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Drag"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""modifier"",
                    ""id"": ""d0b543af-d6bd-4fad-a4c1-f04ea943ca71"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Drag"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""binding"",
                    ""id"": ""87345772-c0fc-4267-b051-a9435caf861f"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Drag"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // FlowMap
        m_FlowMap = asset.FindActionMap("FlowMap", throwIfNotFound: true);
        m_FlowMap_Drag = m_FlowMap.FindAction("Drag", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // FlowMap
    private readonly InputActionMap m_FlowMap;
    private List<IFlowMapActions> m_FlowMapActionsCallbackInterfaces = new List<IFlowMapActions>();
    private readonly InputAction m_FlowMap_Drag;
    public struct FlowMapActions
    {
        private @FlowDrag m_Wrapper;
        public FlowMapActions(@FlowDrag wrapper) { m_Wrapper = wrapper; }
        public InputAction @Drag => m_Wrapper.m_FlowMap_Drag;
        public InputActionMap Get() { return m_Wrapper.m_FlowMap; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(FlowMapActions set) { return set.Get(); }
        public void AddCallbacks(IFlowMapActions instance)
        {
            if (instance == null || m_Wrapper.m_FlowMapActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_FlowMapActionsCallbackInterfaces.Add(instance);
            @Drag.started += instance.OnDrag;
            @Drag.performed += instance.OnDrag;
            @Drag.canceled += instance.OnDrag;
        }

        private void UnregisterCallbacks(IFlowMapActions instance)
        {
            @Drag.started -= instance.OnDrag;
            @Drag.performed -= instance.OnDrag;
            @Drag.canceled -= instance.OnDrag;
        }

        public void RemoveCallbacks(IFlowMapActions instance)
        {
            if (m_Wrapper.m_FlowMapActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IFlowMapActions instance)
        {
            foreach (var item in m_Wrapper.m_FlowMapActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_FlowMapActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public FlowMapActions @FlowMap => new FlowMapActions(this);
    public interface IFlowMapActions
    {
        void OnDrag(InputAction.CallbackContext context);
    }
}
